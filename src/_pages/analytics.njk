{% set title = "newsletter" %}
{% set pageIdSub = 8 %}
{% set admin = true %}
{% extends "layout.njk" %}

{% block styles %} <link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css">{% endblock styles %}

{% block scriptsHead %} 
    <script src="https://unpkg.com/vue/dist/vue.js"></script>
    <script src="https://unpkg.com/element-ui@2.6.1/lib/index.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/highcharts-more.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
    <!-- vue-highcharts should be load after Highcharts -->
    <script src="https://cdn.jsdelivr.net/npm/vue-highcharts/dist/vue-highcharts.min.js"></script>

    

{% endblock scriptsHead %}

{% block content %}
            <div class="container-fluid" id="app">
                {% include "partials/analytics-portlet.njk" %}

            </div>

{% endblock content %}

{% block scripts %} 
<script type="text/babel">

class DateRangePickerOptions {
    constructor() {
        this.dateInCalcRule = -1;
        this.dateInFormat = 'dd.MM.yyyy';
        this.rangeSeparator = '-';
        var thisObj = this;

        this.onPick = function (dates) {
            thisObj.dateInCalcRule = -1;
            thisObj.rangeSeparator = '-';
            thisObj.dateInFormat = 'dd.MM.yyyy';
        };

        this.shortcuts = [
            {
                text: 'Last 7 days',
                onClick(picker) {
                    thisObj.dateInCalcRule = 7;
                    let arange = DateRangePickerOptions.calcRangeByRule(thisObj.dateInCalcRule, null, null);
                    thisObj.dateInFormat = '.';
                    thisObj.rangeSeparator = 'Last 7 days';
                    picker.$emit('pick', arange);
                }
            }, {
                text: 'Last 14 days',
                onClick(picker) {
                    thisObj.dateInCalcRule = 14;
                    let arange = DateRangePickerOptions.calcRangeByRule(thisObj.dateInCalcRule, null, null);
                    thisObj.dateInFormat = '.';
                    thisObj.rangeSeparator = 'Last 14 days';
                    picker.$emit('pick', arange);
                }
            }, {
                text: 'Last 30 days',
                onClick(picker) {
                    thisObj.dateInCalcRule = 30;
                    let arange = DateRangePickerOptions.calcRangeByRule(thisObj.dateInCalcRule, null, null);
                    thisObj.dateInFormat = '.';
                    thisObj.rangeSeparator = 'Last 30 days';
                    picker.$emit('pick', arange);
                }
            }, {
                text: 'Last Month',
                onClick(picker) {
                    thisObj.dateInCalcRule = 31;
                    let arange = DateRangePickerOptions.calcRangeByRule(thisObj.dateInCalcRule, null, null);
                    thisObj.dateInFormat = 'dd.MM.yyyy';
                    thisObj.rangeSeparator = '-';
                    picker.$emit('pick', arange);
                }
            }, {
                text: 'Last Quarter',
                onClick(picker) {
                    thisObj.dateInCalcRule = 90;
                    let arange = DateRangePickerOptions.calcRangeByRule(thisObj.dateInCalcRule, null, null);
                    thisObj.dateInFormat = 'dd.MM.yyyy';
                    thisObj.rangeSeparator = '-';
                    picker.$emit('pick', arange);
                }
            }, {
                text: 'Last Year',
                onClick(picker) {
                    thisObj.dateInCalcRule = 365;
                    let arange = DateRangePickerOptions.calcRangeByRule(thisObj.dateInCalcRule, null, null);
                    thisObj.dateInFormat = 'dd.MM.yyyy';
                    thisObj.rangeSeparator = '-';
                    picker.$emit('pick', arange);
                }
            }
        ];
    }

    static calcRangeByRule(prmCalcRule, prmMinDefault, prmMaxDefault) {
        switch (prmCalcRule) {
            case -1: return [ prmMinDefault, prmMaxDefault ];
            case 365: {
                var targetYear = new Date();
                targetYear.setFullYear(targetYear.getFullYear() - 1);
                var startDate = new Date(targetYear.getFullYear(), 0, 1);
                var endDate = new Date(targetYear.getFullYear(), 12, 0);
                startDate.setHours(0, 0, 0, 0);
                endDate.setHours(23, 59, 59, 0);
                return [startDate, endDate];
            };
            case 90: {
                var targetMonth = new Date();
                targetMonth.setMonth(targetMonth.getMonth() - 3);
                var targetQuater = parseInt((targetMonth.getMonth() + 1) / 3) + 1;
                var startDate = new Date(targetMonth.getFullYear(), 0 + (targetQuater - 1) * 3, 1);
                var endDate = new Date(targetMonth.getFullYear(), 3 + (targetQuater - 1) * 3, 0);
                startDate.setHours(0, 0, 0, 0);
                endDate.setHours(23, 59, 59, 0);
                return [startDate, endDate];
            };
            case 31: {
                var targetMonth = new Date();
                targetMonth.setMonth(targetMonth.getMonth() - 1);
                var startDate = new Date(targetMonth.getFullYear(), targetMonth.getMonth(), 1);
                var endDate = new Date(targetMonth.getFullYear(), targetMonth.getMonth() + 1, 0);
                startDate.setHours(0, 0, 0, 0);
                endDate.setHours(23, 59, 59, 0);
                return [startDate, endDate];
            };
            case 30: {
                var now = new Date();
                const date = new Date();
                date.setHours(0, 0, 0, 0);
                date.setTime(date.getTime() - 3600 * 1000 * 24 * 29);
                return [date, now];
            };
            case 14: {
                var now = new Date();
                const date = new Date();
                date.setHours(0, 0, 0, 0);
                date.setTime(date.getTime() - 3600 * 1000 * 24 * 13);
                return [date, now];
            };
            case 7: {
                var now = new Date();
                const date = new Date();
                date.setHours(0, 0, 0, 0);
                date.setTime(date.getTime() - 3600 * 1000 * 24 * 6);
                return [date, now];
            }
        }
    }

    onChange (e) {
        if (e == null) {
            this.rangeSeparator = '-';
            this.dateInFormat = 'dd.MM.yyyy';
        } else {

        }
        console.log('changed');
    }
}






var options = {
    title: {
        text: 'Title of this chart'
        },
    legend: {
    enabled: false
    },
    credits: {
    enabled: false
    },
    tooltip: {
    positioner: function(labelWidth, labelHeight, point) {
        var seriesPoints = this.chart.series[0].points,
        indexValue, tooltipX, tooltipY;

        seriesPoints.forEach(function(el, inx) {
        if ((point.plotX === Math.round(el.plotX)) && (point.plotY === Math.round(el.plotY))) {
            indexValue = inx;
        }
        });

        tooltipX = point.plotX;
        tooltipY = this.chart.chartHeight - this.chart.plotTop - this.chart.xAxis[0].bottom;

        if (indexValue === 0) {
        tooltipX += this.chart.plotLeft;
        }

        return {
        x: tooltipX,
        y: tooltipY
        };
    },
    shadow: false,
    borderWidth: 1,
    backgroundColor: 'rgba(255,255,255,0.8)'
    },
    xAxis: {
    categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    },
    series: [{
    data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]
    }],
    //exporting: {
    //    showTable: true
    //}
}
Vue.use(VueHighcharts);

new Vue({
    el: "#app",
    data: function() {
        return {
            selectedUserFilter: '',
            savedUserFilters: [{name: 'filter1', id: 1},{name: 'filter2', id: 2},{name: 'filter3', id: 3}],

            chartSorting: '',
            chartSortingOptions: [{label: 'Sort by categories (ascending)', value: 'cat,asc'}, {label: 'Sort by categories (descending)', value: 'cat,desc'},
                {label: 'Sort by total (ascending)', value: 'total,asc'}, {label: 'Sort by total (descending)', value: 'total,desc'},
                {label: 'Sort by negatives (ascending)', value: 'negatives,asc'}, {label: 'Sort by negatives (descending)', value: 'negatives,desc'},
                {label: 'Sort by neutrals (ascending)', value: 'neutrals,asc'}, {label: 'Sort by neutrals (descending)', value: 'neutrals,desc'},
                {label: 'Sort by positives (ascending)', value: 'positives,asc'}, {label: 'Sort by positives (descending)', value: 'positives,desc'},
            ],
            chartType: '',
            chartTypeOptions: [{label: 'Column Chart', value: 'column_chart'}, {label: 'Percentage Chart', value: 'percentage_chart'},
                {label: 'Bar Chart', value: 'bar_chart'}, {label: 'Bar Chart (Percentage)', value: 'bar_chart_percentage'},
                {label: 'Pie Chart', value: 'pie_chart'}, {label: 'Data table', value: 'data_table'},
            ],

            options: options,
            panels: ['isPanelActive', 'isPanelActive2'],
            isPanelActive: false,
            isPanelActive2: true,
            xAxis: {

            },
            yAxis: {
                breakdown: [{name: 'Tonality', id: 1},{name: 'Categories', id: 2},{name: 'Total', id: 3},{name: 'Worldmap', id: 4},],
                breakdownValue: '',
                toggleControl: '',
                linitResults: '',
                typeSorting: '',
                typeSortingOptions: [{label: "Category", id: 1}, {label: "Total", id: 2}, {label: "Positive", id: 3}, {label: "Neutral", id: 4}, {label: "Negative", id: 5}],
                viewSorting: '',
                viewSortingOptions: [{label: "Absolute", id: 1}, {label: "Relative / Percentage", id: 2}],
                orderSorting: '',
                orderSortingOptions: [{label: "Descending", value: "desc"}, {label: "Ascending", value: "asc"},],
            },
            filter: {
                keywords: '',
            },
            dateChangeOptions: new DateRangePickerOptions(),
            tabIndex: 0,
            dlgTabName: false,
            editTitle: '',
            editTitleIndex: null,

            dashboardsValue: '1',
            dashboards: [
                {
                    title: 'New Chart 1',
                    name: '1',
                    content: 'New Chart 1',
                    charts: [
                        {
                            id: 1,
                            panels: ['isPanelActive', 'isPanelActive2'],
                            isPanelActive: false,
                            isPanelActive2: false,
                            chartHeight: {},
                        }
                    ]
                },
            ],
            tabIndex: 1
        }
    },
    methods: {
        addNewDashbord: function(targetName) {
            console.log(this.tabIndex)
            let newDashbordName = ++this.tabIndex + '';
            const title = `New chart ${this.tabIndex}`
            this.dashboards.push({
                title: title,
                name: newDashbordName,
                content: 'New Tab content',

            });
            
            this.dashboardsValue = newDashbordName;
        },
        removeDashbord: function(targetName) {
            let tabs = this.dashboards;
            let activeName = this.dashboardsValue;
            console.log(targetName, activeName)
            if (activeName === targetName) {
                tabs.forEach((tab, index) => {
                    if (tab.name === targetName) {
                        console.log(tab.name)
                        let nextTab = tabs[index + 1] || tabs[index - 1];
                        if (nextTab) {
                            activeName = nextTab.name;
                        }
                    }
                });
            }
            
            this.dashboardsValue = activeName;
            this.dashboards = tabs.filter(tab => tab.name !== targetName);
        },
        editTabName: function(name,index) {
            console.log(name)
            this.editTitle = name;
            this.editTitleIndex = index;
            this.dlgTabName = true;
        },
        saveTabName: function() {
            this.dashboards[this.editTitleIndex].title = this.editTitle;
            console.log(this.editTitleIndex)
            this.dlgTabName = false;
            document.getElementById(`tab-${this.editTitleIndex + 1}`).focus()
        },
        openFilterListDlg: function() {
            console.log('1')
        },
        openFilterDlg: function() {
            console.log(1)
        },
        togglePanel: function(panelName, dashboardIndex, chartIndex) {
            const currentChart =  this.dashboards[dashboardIndex].charts[1 - chartIndex];
            const box = this.$refs[`settingsBox${chartIndex}`][0];
            const chartBox = this.$refs[`myChart${chartIndex}`][0];
            console.log(box, chartBox)
            const chart = chartBox.chart;
            const bottomPanel = this.$refs[`panelBottom${chartIndex}`][0];
            console.log(bottomPanel)
            currentChart.panels.forEach((function(e) {
                if (e === panelName) {
                    currentChart[panelName] = !currentChart[panelName]
                } else {
                    currentChart[e] = false
                    
                }
            }).bind(this))
            console.log(bottomPanel.clientHeight)
            let panelHeight
            const that = this

            setTimeout(function() {
                /*const heightString = that.$refs.settingsBox[0].clientWidth;
                that.$refs.myChart[0].chart.setSize(null, 300)*/
                if (currentChart.isPanelActive2) {
                    panelHeight = bottomPanel.clientHeight;
                    console.log(box)
                    Vue.set(currentChart.chartHeight, 'height', `600px`);
                    chart.setSize(null, null)
                } else {
                    Vue.set(currentChart.chartHeight, 'height', '100%');
                    chart.setSize(null, null)
                }
                const heightString = box.clientWidth
                
                
            }, 400)
        }
    }
}); 
    </script>
{% endblock %}




