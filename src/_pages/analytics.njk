{% set title = "newsletter" %}
{% set pageIdSub = 8 %}
{% set admin = true %}
{% extends "layout.njk" %}

{% block styles %} <link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css">{% endblock styles %}

{% block scriptsHead %} 
    <script src="https://unpkg.com/vue/dist/vue.js"></script>
    <script src="https://unpkg.com/element-ui@2.6.1/lib/index.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/highcharts-more.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    <!-- vue-highcharts should be load after Highcharts -->
    <script src="https://cdn.jsdelivr.net/npm/vue-highcharts/dist/vue-highcharts.min.js"></script>

    <script type="text/javascript">
	var cimsUserLang = 'en_US';
	var cimsDict =
			{"en":[["miscellanous_cloud","Show tagcloud"],["workflow","Workflow"],["add_status","add status"],["edit_status","edit status"],["delete_status","delete status"],["msg_status","Message status"],["Select_category","Select category"],["Open_any_message_and_copy_URL","Open any message and copy URL, starting from http, ending before &msgid"],["never","never"],["Session_timeout_warning","Session timeout warning"],["Session_timeout","Session timeout"],["Add_new_Categories","Add new Categories"],["Please_insert_the_default_landing_page","Please insert the default landing page for multi-organization users."],["Messages","Messages"],["Available_statuses","Available statuses"],["Add_new_status","Add new status"],["Languages","Languages"],["Workflow","Workflow"],["Categories","Categories"],["Sources","Sources"],["URL","URL"],["translated","translated"],["File","File"],["Original title required","Original title required"],["Translation title required","Translation title required"],["mandatory_categories","Mandatory categories"],["revoke_categories","Revoke categories"],["add_revoke","Add revoke"],["add_mandatory","Add mandatory"],["translate","Translate:"],["Hide_tagcloud","Hide tagcloud"],["miscellaneous_filter","miscellaneous filter"],["note_email_address_is_optional","Please note: Entering an email address is optional. If you enter an email adress you will receive a notification if the specified filter conditions are met by a newly added message."],["Select","Select"],["search_and_filter","search & filter"],["extended_text_search","extended text search"],["category_filter","category filter"],["admin_filter","admin filter"],["miscellanous_filter","miscellanous filter"],["save_filter","Save filter"],["reset","Reset"],["submit","Submit"],["mark_all_messages","Mark all messages"],["export_filtered","Export filtered"],["delete_marked","Delete marked"],["text_and_period_filter","text & period filter"],["deactivate_or_reactive_org","Deactivate or Reactive organization (Assets will remail in the Database)"],["cancel","Cancel"],["confirm","Confirm"],["edit","Edit"],["history","History"],["delete_only_messages","Delete only messages in the following timeframe"],["publish_marked","Publish marked"],["posted","Posted"],["text_search","Text Search"],["field","Field"],["search_term","Search Term"],["category","Category"],["created","Created"],["end_date","End date:"],["tags","tags"],["rating","rating"],["delete_complete_org","Delete complete organization (including all messages, categories and sources)"],["changed","Changed"],["feed","Feed"],["user","User"],["status","Status"],["source","Source"],["marked","Marked"],["publish","Publish"],["multi_assignment","Multi assignment"],["add_extended_group","Add Extended Group"],["remove_extended_group","Remove Extended Group"],["add_filter_group","Add Filter Group"],["remove_filter_group","Remove Filter Group"],["close","Close"],["add_to_all_filtered","Add to all filtered messages"],["remove_from_all_filtered","Remove from all filtered messages"],["rules","Rules"],["indexing","Indexing"],["save_rule","Save rule"],["type","Type:"],["id","id:"],["save_and_close","Save & Close"],["save","Save"],["expand_all","expand all"],["collapse_all","collapse all"],["delete","Delete"],["add_new","Add new"],["select_file","Select file"],["org_settings","Organizations settings"],["regular-org","regular-organization"],["resource","Resource:"],["expiration_days","Expiration Days:"],["message_default_url","Message Default URL:"],["new_root_cat","New Root-Category:"],["new_root_res_cat","New Root-Resource-Category:"],["new_res_exp_days","New Resource-Expriration Days:"],["redirect_settings","Redirect settings"],["save_default_login_redirect","Save Default Login Redirect"],["fast_indexing","fast indexing (avoid status editing of messages)"],["index_uncategorized","index uncategorized"],["start_date","Start date:"],["start","Start"],["save_and_next","Save & Next"],["copy_message","Copy message"],["date","Date:"],["views","Views:"],["url","Url:"],["file","File:"],["original","Original:"],["author","Author:"],["message","message"],["original_title","Original Title:"],["translation","translation"],["translate_now","Translate now"],["title","Title:"],["selected_categories","selected categories"],["recently_used","recently used (ai suggestions)"],["add_marked_to_newsletter","Add marked to newsletter"],["add_tonality","Add Tonality"],["show_translation","Show Translation"],["show_html_source","Show html source"],["and","And"],["or","Or"],["exclude","Exclude"],["contains","Contains"],["not_contains","Not contains"],["delete_saved_filter","Delete saved filter"],["note_email_adress_is_optional","Please note: Entering an email adress is optional. If you enter an email adress you will receive a notification if the specified filter conditions are met by a newly added message."],["show_filters","Show filters"],["select_saved_filter","Select saved filter"],["select_users","Select Users"],["search_category","Search category"],["select_source","Select source"],["search_title_or_message","Search title or message"],["category_tree","Category Tree"],["source_tree","Source Tree"],["assigned_rules","Assigned rules:"],["category_type","Category type"],["Rating","Rating"],["Tagging","Tagging"],["TOP","TOP"],["select_date_and_time","Select date and time"],["translate_to","Translate to:"],["ai_suggestions","ai suggestions"],["shortcuts","shortcuts"],["regular_org","regular organization"],["Sort by date (descending)","Sort by date (descending)"],["per_page","per page"],["Sort by date (ascending)","Sort by date (ascending)"],["Sort by views (descending)","Sort by views (descending)"],["Sort by views (ascending)","Sort by views (ascending)"],["Original title","Original title"],["Translated title","Translated title"],["Short description original","Short description original"],["Short description translated","Short description translated"],["Any","Any"],["Unpublished","Unpublished"],["Published","Published"],["Open","Open"],["In Progress","In Progress"],["Resolved","Resolved"],["Reopened","Reopened"],["Closed","Closed"],["language_short","en"],["sources","sources"],["categories","categories"],["New Message","New Messages"],["Date create is required","Date create is required"],["Source site required","Source site required"],["URL required","URL required"],["selected_messages","Selected messages"],["delete_messages","You are going to delete"],["reset_all_selections","Reset All Selections"],["newsletter","Newsletter"],["email_receiver","Email receiver"],["subject","Subject"],["freetext","Freetext"],["send","Send"],["my_groups","My groups"],["select_group","Select group"],["new_group","New group"],["add_new_group","Add new group"],["feed_category","Feed Category"],["new_feed_category","New Feed Category"],["name","Name"],["options","Options"],["new_messages","New messages"],["new_feed_name","New Feed Name"],["edit_feed_name","Edit Feed Name"],["delete_organization_confirm","Are you sure you want to delete organization"],["select_all","Select All"]]};
	var cimsEnLocale = new Map(cimsDict.en);
	var cimsLocale = new Map((cimsDict.lc) ? cimsDict.lc : []);

	function cimsTranslate(e) {
		let elms = document.getElementsByClassName('text-translate');
		for (let e of elms) {
			let key = e.getAttribute('data-translate');
			if (key) {
				e.textContent = getLocaleCimsText(key);
			}
		}
	};

	if(window.attachEvent) {
		window.attachEvent('onload', cimsTranslate);
	} else {
		if(window.onload) {
			let curronload = window.onload;
			let newonload = function(evt) {
				curronload(evt);
				cimsTranslate(evt);
			};
			window.onload = newonload;
		} else {
			window.onload = cimsTranslate;
		}
	}

	function getLocaleCimsText(key) {
		let val = cimsLocale.get(key);
		val = (val) ? val : cimsEnLocale.get(key);
		return (val) ? val : key;
	}

</script>

{% endblock scriptsHead %}

{% block content %}
            <div class="container-fluid" id="app">
                {% include "partials/analytics-portlet.njk" %}

            </div>

{% endblock content %}

{% block scripts %} 
<script type="text/babel">

class DateRangePickerOptions {
    constructor() {
        this.dateInCalcRule = -1;
        this.dateInFormat = 'dd.MM.yyyy';
        this.rangeSeparator = '-';
        var thisObj = this;

        this.onPick = function (dates) {
            thisObj.dateInCalcRule = -1;
            thisObj.rangeSeparator = '-';
            thisObj.dateInFormat = 'dd.MM.yyyy';
        };

        this.shortcuts = [
            {
                text: 'Last 7 days',
                onClick(picker) {
                    thisObj.dateInCalcRule = 7;
                    let arange = DateRangePickerOptions.calcRangeByRule(thisObj.dateInCalcRule, null, null);
                    thisObj.dateInFormat = '.';
                    thisObj.rangeSeparator = 'Last 7 days';
                    picker.$emit('pick', arange);
                }
            }, {
                text: 'Last 14 days',
                onClick(picker) {
                    thisObj.dateInCalcRule = 14;
                    let arange = DateRangePickerOptions.calcRangeByRule(thisObj.dateInCalcRule, null, null);
                    thisObj.dateInFormat = '.';
                    thisObj.rangeSeparator = 'Last 14 days';
                    picker.$emit('pick', arange);
                }
            }, {
                text: 'Last 30 days',
                onClick(picker) {
                    thisObj.dateInCalcRule = 30;
                    let arange = DateRangePickerOptions.calcRangeByRule(thisObj.dateInCalcRule, null, null);
                    thisObj.dateInFormat = '.';
                    thisObj.rangeSeparator = 'Last 30 days';
                    picker.$emit('pick', arange);
                }
            }, {
                text: 'Last Month',
                onClick(picker) {
                    thisObj.dateInCalcRule = 31;
                    let arange = DateRangePickerOptions.calcRangeByRule(thisObj.dateInCalcRule, null, null);
                    thisObj.dateInFormat = 'dd.MM.yyyy';
                    thisObj.rangeSeparator = '-';
                    picker.$emit('pick', arange);
                }
            }, {
                text: 'Last Quarter',
                onClick(picker) {
                    thisObj.dateInCalcRule = 90;
                    let arange = DateRangePickerOptions.calcRangeByRule(thisObj.dateInCalcRule, null, null);
                    thisObj.dateInFormat = 'dd.MM.yyyy';
                    thisObj.rangeSeparator = '-';
                    picker.$emit('pick', arange);
                }
            }, {
                text: 'Last Year',
                onClick(picker) {
                    thisObj.dateInCalcRule = 365;
                    let arange = DateRangePickerOptions.calcRangeByRule(thisObj.dateInCalcRule, null, null);
                    thisObj.dateInFormat = 'dd.MM.yyyy';
                    thisObj.rangeSeparator = '-';
                    picker.$emit('pick', arange);
                }
            }
        ];
    }

    static calcRangeByRule(prmCalcRule, prmMinDefault, prmMaxDefault) {
        switch (prmCalcRule) {
            case -1: return [ prmMinDefault, prmMaxDefault ];
            case 365: {
                var targetYear = new Date();
                targetYear.setFullYear(targetYear.getFullYear() - 1);
                var startDate = new Date(targetYear.getFullYear(), 0, 1);
                var endDate = new Date(targetYear.getFullYear(), 12, 0);
                startDate.setHours(0, 0, 0, 0);
                endDate.setHours(23, 59, 59, 0);
                return [startDate, endDate];
            };
            case 90: {
                var targetMonth = new Date();
                targetMonth.setMonth(targetMonth.getMonth() - 3);
                var targetQuater = parseInt((targetMonth.getMonth() + 1) / 3) + 1;
                var startDate = new Date(targetMonth.getFullYear(), 0 + (targetQuater - 1) * 3, 1);
                var endDate = new Date(targetMonth.getFullYear(), 3 + (targetQuater - 1) * 3, 0);
                startDate.setHours(0, 0, 0, 0);
                endDate.setHours(23, 59, 59, 0);
                return [startDate, endDate];
            };
            case 31: {
                var targetMonth = new Date();
                targetMonth.setMonth(targetMonth.getMonth() - 1);
                var startDate = new Date(targetMonth.getFullYear(), targetMonth.getMonth(), 1);
                var endDate = new Date(targetMonth.getFullYear(), targetMonth.getMonth() + 1, 0);
                startDate.setHours(0, 0, 0, 0);
                endDate.setHours(23, 59, 59, 0);
                return [startDate, endDate];
            };
            case 30: {
                var now = new Date();
                const date = new Date();
                date.setHours(0, 0, 0, 0);
                date.setTime(date.getTime() - 3600 * 1000 * 24 * 29);
                return [date, now];
            };
            case 14: {
                var now = new Date();
                const date = new Date();
                date.setHours(0, 0, 0, 0);
                date.setTime(date.getTime() - 3600 * 1000 * 24 * 13);
                return [date, now];
            };
            case 7: {
                var now = new Date();
                const date = new Date();
                date.setHours(0, 0, 0, 0);
                date.setTime(date.getTime() - 3600 * 1000 * 24 * 6);
                return [date, now];
            }
        }
    }

    onChange (e) {
        if (e == null) {
            this.rangeSeparator = '-';
            this.dateInFormat = 'dd.MM.yyyy';
        } else {

        }
        console.log('changed');
    }
}

var options2 = {

    title: {
        text: 'Solar Employment Growth by Sector, 2010-2016'
    },

    subtitle: {
        text: 'A demo of displaying a data table in Highcharts'
    },

    credits: {
        text: 'Source: thesolarfoundation.com'
    },

    chart: {
        borderWidth: 1,
        borderColor: '#ccc',
        spacingBottom: 30
    },

    yAxis: {
        title: {
            text: 'Number of Employees'
        }
    },
    legend: {
        layout: 'vertical',
        align: 'right',
        verticalAlign: 'middle'
    },

    {# plotOptions: {
        categories: ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F']
    }, #}
    xAxis: {
    categories: ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F']
    },

    series: [{
        name: 'Country A',
        data: [36, 50, 49, 27, 16, 36, 36, 50, 49, 27, 16, 36]
    }, {
        name: 'Country B',
        data: [13, 37, 21, 32, 20, 13]
    }, {
        name: 'Country C',
        data: [30, 32, 31, 13, 37, 34]
    }, {
        name: 'Country D',
        data: [41, 29, 30, 32, 10, 21]
    }],

    exporting: {
        showTable: true
    }

}

var options = {
    title: {
        text: 'Title of this chart'
        },
    legend: {
    enabled: false
    },
    credits: {
    enabled: false
    },
    tooltip: {
    positioner: function(labelWidth, labelHeight, point) {
        var seriesPoints = this.chart.series[0].points,
        indexValue, tooltipX, tooltipY;

        seriesPoints.forEach(function(el, inx) {
        if ((point.plotX === Math.round(el.plotX)) && (point.plotY === Math.round(el.plotY))) {
            indexValue = inx;
        }
        });

        tooltipX = point.plotX;
        tooltipY = this.chart.chartHeight - this.chart.plotTop - this.chart.xAxis[0].bottom;

        if (indexValue === 0) {
        tooltipX += this.chart.plotLeft;
        }

        return {
        x: tooltipX,
        y: tooltipY
        };
    },
    shadow: false,
    borderWidth: 1,
    backgroundColor: 'rgba(255,255,255,0.8)'
    },
    xAxis: {
    categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    },
    series: [{
    data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]
    }],
}
Vue.use(VueHighcharts);

new Vue({
    el: "#app",
    data: function() {
        return {
            selectedUserFilter: '',
            savedUserFilters: [{name: 'filter1', id: 1},{name: 'filter2', id: 2},{name: 'filter3', id: 3}],

            chartSorting: '',
            chartSortingOptions: [{label: 'Sort by categories (ascending)', value: 'cat,asc'}, {label: 'Sort by categories (descending)', value: 'cat,desc'},
                {label: 'Sort by total (ascending)', value: 'total,asc'}, {label: 'Sort by total (descending)', value: 'total,desc'},
                {label: 'Sort by negatives (ascending)', value: 'negatives,asc'}, {label: 'Sort by negatives (descending)', value: 'negatives,desc'},
                {label: 'Sort by neutrals (ascending)', value: 'neutrals,asc'}, {label: 'Sort by neutrals (descending)', value: 'neutrals,desc'},
                {label: 'Sort by positives (ascending)', value: 'positives,asc'}, {label: 'Sort by positives (descending)', value: 'positives,desc'},
            ],
            chartType: '',
            chartTypeOptions: [{label: 'Column Chart', value: 'column_chart'}, {label: 'Percentage Chart', value: 'percentage_chart'},
                {label: 'Bar Chart', value: 'bar_chart'}, {label: 'Bar Chart (Percentage)', value: 'bar_chart_percentage'},
                {label: 'Pie Chart', value: 'pie_chart'}, {label: 'Data table', value: 'data_table'},
            ],

            options: {},
            panels: ['isPanelActive', 'isPanelActive2'],
            isPanelActive: true,
            isPanelActive2: false,
            xAxis: {

            },
            yAxis: {
                breakdown: [{name: 'Tonality', id: 1},{name: 'Categories', id: 2},{name: 'Total', id: 3},{name: 'Worldmap', id: 4},],
                breakdownValue: '',
                toggleControl: '',
                linitResults: '',
                typeSorting: '',
                typeSortingOptions: [{label: "Category", id: 1}, {label: "Total", id: 2}, {label: "Positive", id: 3}, {label: "Neutral", id: 4}, {label: "Negative", id: 5}],
                viewSorting: '',
                viewSortingOptions: [{label: "Absolute", id: 1}, {label: "Relative / Percentage", id: 2}],
                orderSorting: '',
                orderSortingOptions: [{label: "Descending", value: "desc"}, {label: "Ascending", value: "asc"},],
            },
            filter: {
                categoryBlocks: [{
                    blockCondition: "And",
                    categories: [
                        {
                            id: 1944,
                            name: "Alerts",
                            parentCategory: ['CIMS'],
                            ratingCategory: false,
                            visibility: true
                        },
                        {
                            id: 4026,
                            name: "Accident",
                            parentCategory: ['CIMS', 'Alerts'],
                            ratingCategory: false,
                            visibility: true
                        },
                    ],
                    categoryCondition: "And",
                }],
                dateChangeRange: ["", ""],
                dateCreateRange: ["", ""],
                dateInRange: ["", ""],
                extendedKeywords: [
                    {
                        blockCondition: "And",
                        containsCond: true,
                        fieldName: "",
                        keyword: "",
                    }
                ],
                feedId: 0,
                keywords: "",
                reseted: 0,
                source: {
                    id: 0,
                    name: "",
                },
                statusId: 0,
                userIds: [],
                views: [0, 20202]
            },
            fieldNames: [
                {
                    fieldName: "title",
                    label: "Original title"
                },
                {
                    fieldName: "titleTransl",
                    label: "Translated title"
                },
                {
                    fieldName: "shorttext",
                    label: "Short description original"
                },
                {
                    fieldName: "shorttextTransl",
                    label: "Short description translated"
                }
            ],
            categorySearchResult: '',
            userActions: {
                FILTER_BY_DATE_CREATE: true,
                FILTER_BY_DATE_CHANGE: true,
                FILTER_BY_STATUS: true,
                FILTER_BY_FEED: true,
                FILTER_BY_USER: true,
                FILTER_BY_WORKFLLOW_STATUS: true,
                FILTER_BY_SOURCE: true,
                FILTER_BY_VIEWS: true,
            },
            filterMaxViews: 2087420874,
            filterMinViews: 0,
            viewsMax: 2087420874,
            viewsMin: 0,
            cimsStatuses: [
                {
                    id: 1,
                    name: "New Messages",
                },
                {
                    id: 2,
                    name: "Unpublished",
                },
                {
                    id: 3,
                    name: "Published"
                }
            ],
            feeds: [
                {
                    id: 2,
                    name: "qwerty",
                    newMessages: 0,
                    organizationId: 28027,
                }
            ],
            users: [
                {
                    email: "schachtner@consline.com",
                    firstName: "Dirk",
                    lastName: "Schachtner",
                    middleName: "",
                    screenName: "schachtner@consline.com",
                    userId: 10644,
                },
                {
                    email: "van.deelen@consline.com",
                    firstName: "Heinz",
                    lastName: "van Deelen",
                    middleName: "",
                    screenName: "deelen",
                    userId: 12616,
                },
            ],

            workflowStatuses: [
                {
                    id: 78,
                    name: "Open",
                    organizationid: 28027,
                },
                {
                    id: 131,
                    name: "In Progress",
                    organizationid: 28027,
                },
                {
                    id: 184,
                    name: "Resolved",
                    organizationid: 28027,
                },
                {
                    id: 237,
                    name: "Reopened",
                    organizationid: 28027,
                },
                {
                    id: 290,
                    name: "Closed",
                    organizationid: 28027,
                },
                {
                    id: 337,
                    name: "tested",
                    organizationid: 28027,
                },
            ],
            sourceTree: [
                {
                    id: 0,
                    name: "Any",
                    $treeNodeId: 649,
                },
                {
                    expirationDays: 180,
                    id: 903,
                    name: "CIMS",
                    organizationId: 28027,
                    $treeNodeId: 650,
                    children: {
                        children: [],
                        expirationDays: 0,
                        id: 5447,
                        name: "Consline AG Political Risks",
                        organizationId: 28027,
                        $treeNodeId: 651,
                    },
                },
            ],
            sourceTreeProps: {
                children: "children",
                label: "name"
            },
            uiViewsKey: 1,
            messageCount: 734740,
            messageList: [
                {
                    assignmentsRated: [
                        {
                            categoryId: 2246,
                            categoryName: "Problem denied",
                            tonality: 75,
                            tonalityType: -1,
                        },
                        {
                            categoryId: 2367,
                            categoryName: "Engine Noise",
                            tonality: 50,
                            tonalityType: -1,
                        }
                    ],
                    assignmentsTagged: [
                        {
                            categoryId: 2259,
                            categoryName: "1.6 TDI",
                        },
                        {
                            categoryId: 2259,
                            categoryName: "1.6 TDI",
                        },
                        {
                            categoryId: 2259,
                            categoryName: "1.6 TDI",
                        },
                        {
                            categoryId: 2259,
                            categoryName: "1.6 TDI",
                        }
                    ],
                    changeDate: 1516297794000,
                    commentNew: "",
                    dateIn: 4356321720000,
                    hasTranslation: true,
                    id: 2387308,
                    langOriginal: {
                        code: "it_IT",
                        id: 5,
                        name: "Italian",
                    },
                    langTransl: {
                        code: "en_US",
                        id: 1,
                        name: "English",
                    },
                    marked: false,
                    organizationId: 28027,
                    processingMessage: null,
                    shortText: "Golf 7 1.6 tdi 110cv 09/2015 41k. In VW mi hanno detto che non ci possono fare nulla, non hanno ricevuto direttiva da VW. Hanno controllato tramite codice cinghia che il tenditore non è da sostituire, è normale. auto portata a controllo a 36k. Mah... p.s. solo ad auto fredda e quando fa freddo secco, se è umido non fa alcun rumore↵<br>↵https://www.facebook.com/davide.emili.5/videos/10214577732097794/",
                    shortTextTransl: "Golf 7 1.6 TDI 110 Hp 09.2015. Here is a video of the problem. The VW service told me that they cannot do anything about it. They did not got any instruction by VW. The told me that the tensioner is not to replace. My car was checked at 36.000 Km. The noise occurs only when cold.",
                    showHistory: 0,
                    sourceSite: {
                        expirationDays: 10000,
                        id: 11954,
                        name: "facebook.com",
                        organizationId: 28027,
                        sourceId: 1624,
                    },
                    status: {
                        id: 3,
                        name: "Published",
                    },
                    systemIn: {
                        id: 9999,
                        name: "CIMS",
                    },
                    title: "Problema Golf ",
                    titleTransl: "",
                    type: {
                        id: 2,
                        name: "Url",
                    },
                    url: "https://www.facebook.com/groups/162945027204788/permalink/969957593170190/",
                    views: 0,
                    workflowStatusNew: null,
                }
            ],
            uiMessageListKey: 0,
            showHtmlSource: false,
            showTranslation: true,



            dateInOptions: new DateRangePickerOptions(),
            dateCreateOptions: new DateRangePickerOptions(),
            dateChangeOptions: new DateRangePickerOptions(),
            tabIndex: 0,
            dlgTabName: false,
            editTitle: '',
            editTitleIndex: null,

            dashboardsValue: '1',
            dashboards: [
                {
                    title: 'New Chart 1',
                    name: '1',
                    content: 'New Chart 1',
                    charts: [
                        [
                            {
                                id: 1,
                                panels: ['isPanelActive', 'isPanelActive2'],
                                isPanelActive: false,
                                isPanelActive2: true,
                                chartHeight: {},
                                chartType: 'column_chart',
                                messagess: true,
                            }
                        ],
                        [
                            {
                                id: 2,
                                panels: ['isPanelActive', 'isPanelActive2'],
                                isPanelActive: false,
                                isPanelActive2: false,
                                chartHeight: {},
                                chartType: null,
                                messagess: false,
                            },
                            {
                                id: 3,
                                panels: ['isPanelActive', 'isPanelActive2'],
                                isPanelActive: false,
                                isPanelActive2: false,
                                chartHeight: {},
                                chartType: null,
                                messagess: false,
                            }
                        ],
                    ]
                },
            ],
            tabIndex: 1
        }
    },
    methods: {
        addNewDashbord: function(targetName) {
            console.log(this.tabIndex)
            let newDashbordName = ++this.tabIndex + '';
            const title = `New chart ${this.tabIndex}`
            this.dashboards.push({
                title: title,
                name: newDashbordName,
                content: 'New Tab content',

            });
            
            this.dashboardsValue = newDashbordName;
        },
        removeDashbord: function(targetName) {
            let tabs = this.dashboards;
            let activeName = this.dashboardsValue;
            console.log(targetName, activeName)
            if (activeName === targetName) {
                tabs.forEach((tab, index) => {
                    if (tab.name === targetName) {
                        console.log(tab.name)
                        let nextTab = tabs[index + 1] || tabs[index - 1];
                        if (nextTab) {
                            activeName = nextTab.name;
                        }
                    }
                });
            }
            
            this.dashboardsValue = activeName;
            this.dashboards = tabs.filter(tab => tab.name !== targetName);
        },
        editTabName: function(name,index) {
            console.log(name)
            this.editTitle = name;
            this.editTitleIndex = index;
            this.dlgTabName = true;
        },
        saveTabName: function() {
            this.dashboards[this.editTitleIndex].title = this.editTitle;
            console.log(this.editTitleIndex)
            this.dlgTabName = false;
            document.getElementById(`tab-${this.editTitleIndex + 1}`).focus()
        },
        openFilterListDlg: function() {
            console.log('1')
        },
        openFilterDlg: function() {
            console.log(1)
        },
        {# togglePanel: function(panelName, dashboardIndex, chartIndex, i) {
            console.log(panelName,dashboardIndex,chartIndex, i)
            //const currentChart =  this.dashboards[dashboardIndex].charts[chartIndex];
        
            const currentChart =  this.dashboards[dashboardIndex].charts[i][chartIndex - 1];
            console.log(currentChart, currentChart)
            const box = this.$refs[`settingsBox${chartIndex}`][0];
            const chartBox = this.$refs[`myChart${chartIndex}`][0];
            console.log(box, chartBox)
            const chart = chartBox.chart;
            const bottomPanel = this.$refs[`panelBottom${chartIndex}`][0];
            console.log(bottomPanel)
            currentChart.panels.forEach((function(e) {
                console.log(e)
                if (e === panelName) {
                    currentChart[panelName] = !currentChart[panelName]
                } else {
                    currentChart[e] = false
                    
                }
            }).bind(this))
            console.log(bottomPanel.clientHeight)
            let panelHeight
            const that = this

            setTimeout(function() {
                if (currentChart.isPanelActive2) {
                    panelHeight = bottomPanel.clientHeight;
                    console.log(box)
                    chart.setSize(null, null)
                } else {
                    chart.setSize(null, null)
                }
                const heightString = box.clientWidth
                
                
            }, 400)
        }, #}

        togglePanel: function(panelName, dashboardIndex, graphIndex, chartIndex, w) {
            console.log(panelName, dashboardIndex, graphIndex, chartIndex, w)
            const currentChart =  this.dashboards[dashboardIndex].charts[graphIndex][chartIndex]; // get char by index
            console.log(currentChart)
            const chartBox = this.$refs[`myChart${dashboardIndex}${graphIndex}${chartIndex}`][0];
            const chart = chartBox.chart;
            currentChart.panels.forEach((function(e) {
                console.log(e)
                if (e === panelName) {
                    currentChart[panelName] = !currentChart[panelName]
                } else {
                    currentChart[e] = false
                    
                }
            }).bind(this))

            setTimeout(function() {
                chart.setSize(null, null)
            }, 400)
        },
        selectPlainCategory: function() {
            console.log(1)
        },
        onSourceNodeClick: function() {},
        translateCategoryName: function(cat) {
            return cat.nam
        },
        canViewStatus: function() {return true},
        getMessageStatusStyle: function(msg) {
            return 'message-status message-status--published';
        },
        isEnabledFile: function (msg) {
            return true
        },
        getFileIcon: function(type) {
            return false
        },
        selectChart: function(item, e) {
            if (item === 'data_table') {
                this.options = options2;
            } else {
                this.options = options;
            }
        }
    }
}); 
    </script>
{% endblock %}




